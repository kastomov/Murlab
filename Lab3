import java.time.LocalDate;
import java.util.Arrays;

public class GroupElectronicShopping {

    private int groupNumber;
    private ElectronicShopping[] electronicShoppingItems;

    // Конструктор по умолчанию
    public GroupElectronicShopping() {
        this.groupNumber = 0;
        this.electronicShoppingItems = new ElectronicShopping[0];
    }

    // Конструктор, принимающий массив объектов
    public GroupElectronicShopping(int groupNumber, ElectronicShopping[] electronicShoppingItems) {
        this.groupNumber = groupNumber;
        this.electronicShoppingItems = electronicShoppingItems;
    }

    // Метод get/set для объекта из массива
    public ElectronicShopping getElectronicShoppingItem(int index) {
        if (index >= 0 && index < electronicShoppingItems.length) {
            return electronicShoppingItems[index];
        } else {
            return null;
        }
    }

    public void setElectronicShoppingItem(int index, ElectronicShopping electronicShoppingItem) {
        if (index >= 0 && index < electronicShoppingItems.length) {
            electronicShoppingItems[index] = electronicShoppingItem;
        }
    }

    // Метод get/set для массива
    public ElectronicShopping[] getElectronicShoppingItems() {
        return electronicShoppingItems;
    }

    public void setElectronicShoppingItems(ElectronicShopping[] electronicShoppingItems) {
        this.electronicShoppingItems = electronicShoppingItems;
    }

    // Метод добавления объекта в массив
    public void addElectronicShoppingItem(ElectronicShopping electronicShoppingItem) {
        ElectronicShopping[] newElectronicShoppingItems = Arrays.copyOf(electronicShoppingItems, electronicShoppingItems.length + 1);
        newElectronicShoppingItems[newElectronicShoppingItems.length - 1] = electronicShoppingItem;
        electronicShoppingItems = newElectronicShoppingItems;
    }

    // Метод удаления объекта из массива по ФИО покупателя
    public void removeElectronicShoppingItemByBuyerName(String buyerName) {
        int indexToRemove = -1;
        for (int i = 0; i < electronicShoppingItems.length; i++) {
            if (electronicShoppingItems[i].getBuyerName().equals(buyerName)) {
                indexToRemove = i;
                break;
            }
        }
        if (indexToRemove != -1) {
            ElectronicShopping[] newElectronicShoppingItems = new ElectronicShopping[electronicShoppingItems.length - 1];
      System.arraycopy(electronicShoppingItems, 0, newElectronicShoppingItems, 0, indexToRemove);
      System.arraycopy(electronicShoppingItems, indexToRemove + 1, newElectronicShoppingItems, indexToRemove, electronicShoppingItems.length - indexToRemove - 1);
      electronicShoppingItems = newElectronicShoppingItems;
    }
  }

  // Метод сортировки массива по сумме покупки (по возрастанию)
  public void sortElectronicShoppingItemsByPurchaseAmount() {
    Arrays.sort(electronicShoppingItems, (item1, item2) -> Double.compare(item1.getPurchaseAmount(), item2.getPurchaseAmount()));
  }

  // Метод toString()
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("Group Number: ").append(groupNumber).append("\n");
    sb.append("Electronic Shopping Items:\n");
    for (ElectronicShopping electronicShoppingItem : electronicShoppingItems) {
      sb.append(electronicShoppingItem).append("\n");
    }
    return sb.toString();
  }

  // Внутренний класс ElectronicShopping
  public static class ElectronicShopping {
    private String storeName;
    private String productName;
    private String countryManufacturer;
    private String paymentMethod;
    private double purchaseAmount;
    private LocalDate saleDate;
    private String buyerName;

    // Конструктор
    public ElectronicShopping(String storeName, String productName, String countryManufacturer, String paymentMethod, double purchaseAmount, LocalDate saleDate, String buyerName) {
      this.storeName = storeName;
      this.productName = productName;
      this.countryManufacturer = countryManufacturer;
      this.paymentMethod = paymentMethod;
      this.purchaseAmount = purchaseAmount;
      this.saleDate = saleDate;
      this.buyerName = buyerName;
    }

    // Геттеры и сеттеры
    public String getStoreName() {
      return storeName;
    }

    public void setStoreName(String storeName) {
      this.storeName = storeName;
    }

    public String getProductName() {
      return productName;
    }

    public void setProductName(String productName) {
      this.productName = productName;
    }

    public String getCountryManufacturer() {
      return countryManufacturer;
    }

    public void setCountryManufacturer(String countryManufacturer) {
      this.countryManufacturer = countryManufacturer;
    }

    public String getPaymentMethod() {
      return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
      this.paymentMethod = paymentMethod;
    }

    public double getPurchaseAmount() {
      return purchaseAmount;
    }

    public void setPurchaseAmount(double purchaseAmount) {
      this.purchaseAmount = purchaseAmount;
    }

    public LocalDate getSaleDate() {
      return saleDate;
    }

    public void setSaleDate(LocalDate saleDate) {
      this.saleDate = saleDate;
    }

    public String getBuyerName() {
      return buyerName;
    }

    public void setBuyerName(String buyerName) {
      this.buyerName = buyerName;
    }

    // Переопределенный метод toString()
    @Override
    public String toString() {
      return "ElectronicShopping{" +
          "storeName='" + storeName + '\'' +
          ", productName='" + productName + '\'' +
          ", countryManufacturer='" + countryManufacturer + '\'' +
          ", paymentMethod='" + paymentMethod + '\'' +
          ", purchaseAmount=" + purchaseAmount +
          ", saleDate=" + saleDate +
          ", buyerName='" + buyerName + '\'' +
          '}';
    }
  }
}
public class Main {
  public static void main(String[] args) {
    // Создание объектов ElectronicShopping
    ElectronicShopping item1 = new GroupElectronicShopping.ElectronicShopping("Amazon", "Laptop", "USA", "CreditCard", 1200.0, LocalDate.of(2023, 10, 25), "John Doe");
    ElectronicShopping item2 = new GroupElectronicShopping.ElectronicShopping("BestBuy", "Headphones", "Japan", "PayPal", 150.0, LocalDate.of(2023, 10, 20), "Jane Smith");
    ElectronicShopping item3 = new GroupElectronicShopping.ElectronicShopping("Walmart", "Smartphone", "China", "Cash", 800.0, LocalDate.of(2023, 10, 22), "David Lee");

    // Создание объекта GroupElectronicShopping
    GroupElectronicShopping group = new GroupElectronicShopping(1, new ElectronicShopping[]{item1, item2, item3});

    // Вывод информации об объекте GroupElectronicShopping
    System.out.println(group);

    // Добавление нового объекта в массив
    group.addElectronicShoppingItem(new GroupElectronicShopping.ElectronicShopping("Target", "Tablet", "South Korea", "DebitCard", 300.0, LocalDate.of(2023, 10, 26), "Emily Brown"));

    // Удаление объекта из массива по ФИО покупателя
    group.removeElectronicShoppingItemByBuyerName("Jane Smith");

    // Сортировка массива по сумме покупки
    group.sortElectronicShoppingItemsByPurchaseAmount();

    // Вывод информации об объекте GroupElectronicShopping после изменений
    System.out.println(group);
  }
}
