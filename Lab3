import java.time.LocalDate;
import java.util.Arrays;

public class ElectronicShopping {

    private int groupNumber;
    private String storeName;
    private String productName;
    private String countryManufacturer;
    private String paymentMethod;
    private double purchaseAmount;
    private LocalDate saleDate;
    private String buyerName;
    private ElectronicShopping[] electronicShoppingItems;

    // Конструктор по умолчанию
    public ElectronicShopping() {
        this.groupNumber = 0;
        this.storeName = "";
        this.productName = "";
        this.countryManufacturer = "";
        this.paymentMethod = "";
        this.purchaseAmount = 0.0;
        this.saleDate = null;
        this.buyerName = "";
        this.electronicShoppingItems = new ElectronicShopping[0];
    }

// Конструктор для создания отдельного объекта ElectronicShopping
public ElectronicShopping(String storeName, String productName, String countryManufacturer, String paymentMethod, double purchaseAmount, LocalDate saleDate, String buyerName) {
    this.storeName = storeName;
    this.productName = productName;
    this.countryManufacturer = countryManufacturer;
    this.paymentMethod = paymentMethod;
    this.purchaseAmount = purchaseAmount;
    this.saleDate = saleDate;
    this.buyerName = buyerName;
}

    // Конструктор для создания группы объектов ElectronicShopping
    public ElectronicShopping(int groupNumber, ElectronicShopping[] electronicShoppingItems) {
        this.groupNumber = groupNumber;
        this.electronicShoppingItems = electronicShoppingItems;
    }

    // Методы get/set для свойств объекта
    public int getGroupNumber() {
        return groupNumber;
    }

    public void setGroupNumber(int groupNumber) {
        this.groupNumber = groupNumber;
    }

    public String getStoreName() {
        return storeName;
    }

    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public String getCountryManufacturer() {
        return countryManufacturer;
    }

    public void setCountryManufacturer(String countryManufacturer) {
        this.countryManufacturer = countryManufacturer;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public double getPurchaseAmount() {
        return purchaseAmount;
    }

    public void setPurchaseAmount(double purchaseAmount) {
        this.purchaseAmount = purchaseAmount;
    }

    public LocalDate getSaleDate() {
        return saleDate;
    }

    public void setSaleDate(LocalDate saleDate) {
        this.saleDate = saleDate;
    }

    public String getBuyerName() {
        return buyerName;
    }

    public void setBuyerName(String buyerName) {
        this.buyerName = buyerName;
    }

    // Методы get/set для массива объектов
    public ElectronicShopping[] getElectronicShoppingItems() {
        return electronicShoppingItems;
    }


    public void setElectronicShoppingItems(ElectronicShopping[] electronicShoppingItems) {
        this.electronicShoppingItems = electronicShoppingItems;
    }

    // Метод добавления объекта в массив
    public void addElectronicShoppingItem(ElectronicShopping electronicShoppingItem) {
        ElectronicShopping[] newElectronicShoppingItems = Arrays.copyOf(electronicShoppingItems, electronicShoppingItems.length + 1);
        newElectronicShoppingItems[newElectronicShoppingItems.length - 1] = electronicShoppingItem;
        electronicShoppingItems = newElectronicShoppingItems;
    }

    // Метод удаления объекта из массива по ФИО покупателя
    public void removeElectronicShoppingItemByBuyerName(String buyerName) {
        int indexToRemove = -1;
        for (int i = 0; i < electronicShoppingItems.length; i++) {
            if (electronicShoppingItems[i].getBuyerName().equals(buyerName)) {
                indexToRemove = i;
                break;
            }
        }
        if (indexToRemove != -1) {
            ElectronicShopping[] newElectronicShoppingItems = new ElectronicShopping[electronicShoppingItems.length - 1];
            System.arraycopy(electronicShoppingItems, 0, newElectronicShoppingItems, 0, indexToRemove);
            System.arraycopy(electronicShoppingItems, indexToRemove + 1, newElectronicShoppingItems, indexToRemove, electronicShoppingItems.length - indexToRemove - 1);
            electronicShoppingItems = newElectronicShoppingItems;
        }
    }

// Метод сортировки массива по сумме покупки (по возрастанию)
public void sortElectronicShoppingItemsByPurchaseAmount() {
    Arrays.sort(electronicShoppingItems, (item1, item2) -> Double.compare(item1.getPurchaseAmount(), item2.getPurchaseAmount()));
}

    // Переопределенный метод toString()
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Group Number: ").append(groupNumber).append("\n");
        sb.append("Electronic Shopping Items:\n");
        for (ElectronicShopping electronicShoppingItem : electronicShoppingItems) {
            sb.append(electronicShoppingItem).append("\n");
        }
        return sb.toString();
    }
}
